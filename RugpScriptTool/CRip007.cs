using System;
using System.IO;
using ImageMagick;

namespace rUGP
{
    // ReSharper disable MemberCanBePrivate.Global
    // ReSharper disable FieldCanBeMadeReadOnly.Global
    // ReSharper disable RedundantAssignment
    public class CRip007 : CRip
    {
        protected byte[] CompressInfo;

        public CRip007(string name, byte[] bytes) : base(name)
        {
            using var stream = new MemoryStream(bytes);
            using var reader = new BinaryReader(stream);

            Version = reader.ReadUInt32();
            switch (Version)
            {
                case 0x45:
                    Width = reader.ReadUInt16();
                    Height = reader.ReadUInt16();
                    ValidateRect = new Rect(reader.ReadUInt16(), reader.ReadUInt16(), reader.ReadUInt16(),
                        reader.ReadUInt16());
                    Flags = reader.ReadUInt32();
                    CompressInfo = reader.ReadBytes(0x07);
                    var node = reader.ReadUInt16();
                    if (node != 0x0000) throw new FormatException("Node != null");
                    var size = reader.ReadInt32();
                    X3C = reader.ReadUInt32();
                    Compressed = reader.ReadBytes(size);
                    break;
                default:
                    throw new NotSupportedException($"version {Version} not supported");
            }
        }

        public override MagickImage ToImage()
        {
            var settings = new MagickReadSettings
            {
                Width = Width,
                Height = Height,
                Format = MagickFormat.Bgra,
                Depth = 8,
                Page = ValidateRect.ToMagickGeometry()
            };
            var data = (Flags & 0xFF) switch
            {
                0x02 => UnCompressRgb001(),
                0x03 => UnCompressRgba(),
                _ => null
            } ?? throw new FormatException($"unsupported flags: {Flags:X8}");

            var image = new MagickImage(data, settings);
            return image;
        }

        public override void Merge(MagickImage image)
        {
            throw new NotImplementedException("CRip007::Merge");
        }

        // ?UnCompressRgb001@CRip007@@QBEXPAUIS5i@@PBUtagRBDY@@1@Z
        private byte[] UnCompressRgb001()
        {
            var output = new byte[Width * Height * 4];
            var stride = Width * 4;
            var bBits = CompressInfo[4];
            var gBits = CompressInfo[5];
            var rBits = CompressInfo[6];
            var isBgr676 = 6 == bBits && 7 == gBits && 6 == rBits;
            var bShift = 0x08 - bBits;
            var gShift = 0x10 - gBits;
            var rShift = 0x18 - rBits;
            var baseline = 0xFF >> bBits | (0xFF >> gBits | (0xFF >> rBits | 0xFF00) << 8) << 8;
            var position = 0x00;

            for (var y = 0; y < Height; y++)
            {
                var offset = y * stride;
                var rgba = 0;
                for (var x = 0; x < Width;)
                {
                    var rgb = rgba;
                    var count = ReadInt(ref position);
                    x += count;
                    do
                    {
                        if (ReadBit(ref position))
                        {
                            rgb = BitConverter.ToInt32(output, offset - stride);
                            if (rgb != 0) rgb -= baseline;
                            rgba = rgb;
                        }
                        else
                        {
                            var r = 0;
                            var g = 0;
                            var b = 0;

                            if (ReadBit(ref position)) g = ReadSigned(ref position);

                            var bInc = 0;
                            if (ReadBit(ref position)) bInc = ReadQuantTransfer(ref position);

                            var rInc = 0;
                            if (ReadBit(ref position)) rInc = ReadQuantTransfer(ref position);

                            var gg = g;
                            if (isBgr676) gg >>= 1;
                            if (CompressInfo[3] != 0)
                            {
                                var c1 = (0xFF >> bShift) & (int)((uint)rgba >> bShift);
                                c1 = -c1;
                                if (gg >= c1)
                                {
                                    var c2 = (0xFF >> bShift) + c1;
                                    c1 = c2;
                                    if (gg <= c2) c1 = gg;
                                }

                                b = c1 + bInc;
                                c1 = (0xFF0000 >> rShift) & (int)((uint)rgba >> rShift);
                                c1 = -c1;
                                if (gg >= c1)
                                {
                                    var c2 = (0xFF0000 >> rShift) + c1;
                                    c1 = c2;
                                    if (gg <= c2) c1 = gg;
                                }

                                r = c1 + rInc;
                            }
                            else
                            {
                                b = gg + bInc;
                                r = gg + rInc;
                            }

                            rgba += (b << bShift) + (r << rShift) + (g << gShift);
                            rgb = rgba;
                        }

                        if (rgb != 0) rgb += baseline;
                        BitConverter.GetBytes(rgb).CopyTo(output, offset);
                        offset += 4;
                    } while (--count > 0);

                    if (x >= Width) break;

                    count = ReadInt(ref position);
                    x += count;
                    while (count-- > 0)
                    {
                        BitConverter.GetBytes(rgb).CopyTo(output, offset);
                        offset += 4;
                    }
                }
            }

            return output;
        }

        // ?UnCompressRgb001@CRip007@@QBEXPAUIS5i@@PBUtagRBDY@@1@Z
        private byte[] CompressRgb001(byte[] input)
        {
            var stride = Width * 4;
            var bBits = CompressInfo[4];
            var gBits = CompressInfo[5];
            var rBits = CompressInfo[6];
            var isBgr676 = 6 == bBits && 7 == gBits && 6 == rBits;
            var bShift = 0x08 - bBits;
            var gShift = 0x10 - gBits;
            var rShift = 0x18 - rBits;
            var baseline = 0xFF >> bBits | (0xFF >> gBits | (0xFF >> rBits | 0xFF00) << 8) << 8;
            var position = 0x00;

            for (var y = 0; y < Height; y++)
            {
                var offset = y * stride;
                // var rgba = 0;
                // var horizontal = false;
                var count = 0;
                for (var x = 0; x < Width; x++)
                {
                    // if (y != 0 && 
                    //     BitConverter.ToInt32(input, offset - stride) == BitConverter.ToInt32(input, offset))
                    // {
                    //     offset += 4;
                    //     count++;
                    //     continue;
                    // }
                    //
                    // if (x == 0 ||
                    //     BitConverter.ToInt32(input, offset - 4) != BitConverter.ToInt32(input, offset))
                    // {
                    //     offset += 4;
                    //     count++;
                    //     continue;
                    // }
                    //
                    // // TODO write count
                    // count = 0;
                    //
                    // while (BitConverter.ToInt32(input, offset - 4) == BitConverter.ToInt32(input, offset))
                    // {
                    //     offset += 4;
                    //     count++;
                    // }
                }
            }

            return null;
        }

        // ?UnCompressRgba1@CRip007@@QBEXPAUIS5i@@PBUtagRBDY@@1W4tagRipRop@CRip@@@Z
        private byte[] UnCompressRgba()
        {
            var output = new byte[Width * Height * 4];
            var stride = Width * 4;
            var bBits = CompressInfo[4];
            var gBits = CompressInfo[5];
            var rBits = CompressInfo[6];
            var bShift = 0x08 - bBits;
            var gShift = 0x10 - gBits;
            var rShift = 0x18 - rBits;
            var baseline = 0xFF >> bBits | (0xFF >> gBits | (0xFF >> rBits << 8)) << 8;
            var line = new int[ValidateRect.W];
            var position = 0x00;

            for (var y = 0; y < ValidateRect.H; y++)
            {
                var offset = (ValidateRect.Y + y) * stride + ValidateRect.X * 4;
                var alpha = 0;
                var rgb = 0;
                var repeat = true;
                var repeatCount = 0;
                var chunk = 0;
                for (var x = 0; x < ValidateRect.W;)
                {
                    if (chunk == 0)
                    {
                        var alphaInc = 0;
                        if (ReadBit(ref position)) alphaInc = ReadSigned(ref position);
                        alpha += alphaInc;
                        if (0x00 == alpha || 0x1F == alpha) chunk = ReadInt(ref position);
                    }

                    switch (alpha)
                    {
                        case 0:
                            offset += 4 * chunk;
                            x += chunk;
                            chunk = 0;
                            continue;
                        case 0x1F:
                            chunk--;
                            break;
                    }

                    if (0x00 == repeatCount)
                    {
                        repeatCount = ReadInt(ref position);
                        repeat = !repeat;
                    }

                    repeatCount--;
                    if (!repeat)
                    {
                        if (ReadBit(ref position))
                        {
                            rgb = line[x];
                        }
                        else
                        {
                            var g = 0;
                            if (ReadBit(ref position)) g = ReadSigned(ref position);

                            var bInc = 0;
                            if (ReadBit(ref position)) bInc = ReadQuantTransfer(ref position);

                            var rInc = 0;
                            if (ReadBit(ref position)) rInc = ReadQuantTransfer(ref position);

                            var c1 = (0xFF >> bShift) & (int)((uint)rgb >> bShift);
                            c1 = -c1;
                            if (g >= c1)
                            {
                                var c2 = (0xFF >> bShift) + c1;
                                c1 = g;
                                if (g > c2) c1 = c2;
                            }

                            var b = c1 + bInc;
                            c1 = (0xFF0000 >> rShift) & (int)((uint)rgb >> rShift);
                            c1 = -c1;
                            if (g >= c1)
                            {
                                var c2 = (0xFF0000 >> rShift) + c1;
                                c1 = g;
                                if (g > c2) c1 = c2;
                            }

                            var r = c1 + rInc;
                            rgb += (b << bShift) + (r << rShift) + (g << gShift);
                        }
                    }

                    var pixel = (uint)(baseline + rgb) | (0x1F == alpha ? 0xFF000000u : (uint)(alpha << 0x1B));
                    BitConverter.GetBytes(pixel).CopyTo(output, offset);
                    offset += 4;
                    line[x++] = rgb;
                }
            }

            return output;
        }

        private int ReadInt(ref int position)
        {
            var x = 0x01;
            while (ReadBit(ref position)) x = (x << 0x01) | (ReadBit(ref position) ? 0x01 : 0x00);
            return x;
        }

        private int ReadSigned(ref int position)
        {
            return ReadBit(ref position) ? -ReadInt(ref position) : ReadInt(ref position);
        }

        private int ReadQuantTransfer(ref int position)
        {
            return ReadBit(ref position)
                ? -TblQuantTransfer[CompressInfo[0], ReadInt(ref position)]
                : TblQuantTransfer[CompressInfo[0], ReadInt(ref position)];
        }

        // ?_GLOBAL_tblQuantTransfer@@3QBUCQuantTbl@@B
        private static readonly byte[,] TblQuantTransfer =
        {
            {
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
                0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
                0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
                0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
                0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
                0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
                0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
                0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
                0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
                0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
                0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
                0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
                0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
            },
            {
                0x00, 0x01, 0x02, 0x04, 0x06, 0x09, 0x0C, 0x0F, 0x13, 0x16, 0x19, 0x1C, 0x1F, 0x23, 0x27, 0x2B,
                0x30, 0x34, 0x38, 0x3C, 0x40, 0x44, 0x48, 0x4C, 0x50, 0x54, 0x58, 0x5C, 0x60, 0x64, 0x68, 0x6C,
                0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x01, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, 0x04, 0x05, 0x05, 0x05, 0x06, 0x06, 0x06, 0x07,
                0x07, 0x07, 0x07, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B, 0x0B, 0x0C,
                0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
                0x10, 0x10, 0x10, 0x10, 0x11, 0x11, 0x11, 0x11, 0x12, 0x12, 0x12, 0x12, 0x13, 0x13, 0x13, 0x13,
                0x14, 0x14, 0x14, 0x14, 0x15, 0x15, 0x15, 0x15, 0x16, 0x16, 0x16, 0x16, 0x17, 0x17, 0x17, 0x17,
                0x18, 0x18, 0x18, 0x18, 0x19, 0x19, 0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B,
                0x1C, 0x1C, 0x1C, 0x1C, 0x1D, 0x1D, 0x1D, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F,
                0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
            },
            {
                0x00, 0x01, 0x02, 0x04, 0x08, 0x0C, 0x10, 0x14, 0x18, 0x1B, 0x1E, 0x22, 0x26, 0x2A, 0x2E, 0x32,
                0x36, 0x3A, 0x3E, 0x42, 0x46, 0x4B, 0x50, 0x55, 0x5A, 0x5F, 0x64, 0x69, 0x6E, 0x73, 0x78, 0x7D,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x01, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x04, 0x05, 0x05, 0x05, 0x05,
                0x06, 0x06, 0x06, 0x06, 0x07, 0x07, 0x07, 0x07, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x0A, 0x0A,
                0x0A, 0x0A, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E,
                0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10, 0x11, 0x11, 0x11, 0x11, 0x12, 0x12,
                0x12, 0x12, 0x13, 0x13, 0x13, 0x13, 0x14, 0x14, 0x14, 0x14, 0x14, 0x15, 0x15, 0x15, 0x15, 0x15,
                0x16, 0x16, 0x16, 0x16, 0x16, 0x17, 0x17, 0x17, 0x17, 0x17, 0x18, 0x18, 0x18, 0x18, 0x18, 0x19,
                0x19, 0x19, 0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1C,
                0x1C, 0x1C, 0x1C, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1F, 0x1F,
            },
            {
                0x00, 0x01, 0x03, 0x07, 0x0C, 0x10, 0x15, 0x1A, 0x20, 0x25, 0x2A, 0x30, 0x36, 0x3C, 0x42, 0x48,
                0x50, 0x54, 0x58, 0x5C, 0x60, 0x64, 0x68, 0x6C, 0x70, 0x74, 0x78, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x04,
                0x05, 0x05, 0x05, 0x05, 0x05, 0x06, 0x06, 0x06, 0x06, 0x06, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
                0x08, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A,
                0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D,
                0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
                0x10, 0x10, 0x10, 0x10, 0x11, 0x11, 0x11, 0x11, 0x12, 0x12, 0x12, 0x12, 0x13, 0x13, 0x13, 0x13,
                0x14, 0x14, 0x14, 0x14, 0x15, 0x15, 0x15, 0x15, 0x16, 0x16, 0x16, 0x16, 0x17, 0x17, 0x17, 0x17,
                0x18, 0x18, 0x18, 0x18, 0x19, 0x19, 0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
            },
            {
                0x00, 0x01, 0x03, 0x07, 0x0D, 0x13, 0x1A, 0x21, 0x28, 0x2F, 0x36, 0x3E, 0x46, 0x4E, 0x56, 0x5E,
                0x68, 0x6A, 0x6C, 0x6E, 0x70, 0x72, 0x74, 0x76, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04,
                0x04, 0x04, 0x04, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
                0x06, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x09,
                0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B,
                0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D,
                0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F,
                0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12, 0x13, 0x13,
                0x14, 0x14, 0x15, 0x15, 0x16, 0x16, 0x17, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
            },
            {
                0x00, 0x01, 0x04, 0x0A, 0x11, 0x18, 0x20, 0x28, 0x32, 0x3C, 0x46, 0x50, 0x5A, 0x64, 0x6E, 0x78,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
                0x03, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
                0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
                0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09,
                0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A,
                0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
                0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E,
                0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
            }
        };
    }
}
using System;
using System.Collections.Generic;
using System.IO;
using ImageMagick;

namespace rUGP
{
    // ReSharper disable MemberCanBePrivate.Global
    // ReSharper disable FieldCanBeMadeReadOnly.Global
    // ReSharper disable RedundantAssignment
    public class CRip007 : CRip
    {
        protected byte[] CompressInfo;

        public CRip007(string name, byte[] bytes) : base(name)
        {
            using var stream = new MemoryStream(bytes);
            using var reader = new BinaryReader(stream);

            Version = reader.ReadUInt32();
            switch (Version)
            {
                case 0x45:
                {
                    Width = reader.ReadUInt16();
                    Height = reader.ReadUInt16();
                    var x = reader.ReadUInt16();
                    var y = reader.ReadUInt16();
                    var w = reader.ReadUInt16();
                    var h = reader.ReadUInt16();
                    ValidateRect = new Rect(x, y, w, h);
                    Flags = reader.ReadUInt32();
                    CompressInfo = reader.ReadBytes(0x07);
                    var node = reader.ReadUInt16();
                    if (node != 0x0000) throw new FormatException("Node != null");
                    var size = reader.ReadInt32();
                    X3C = reader.ReadUInt32();
                    Compressed = reader.ReadBytes(size);
                }
                    break;
                default:
                    throw new NotSupportedException($"version {Version} not supported");
            }
        }

        public override MagickImage ToImage()
        {
            var settings = new MagickReadSettings
            {
                Width = Width,
                Height = Height,
                Format = MagickFormat.Bgra,
                Depth = 0x08,
                Page = ValidateRect.ToMagickGeometry()
            };
            var data = (Flags & 0xFF) switch
            {
                0x02 => UnCompressRgb001(),
                0x03 => UnCompressRgba1(),
                _ => null
            } ?? throw new FormatException($"unsupported flags: {Flags:X8}");

            return new MagickImage(data, settings);
        }

        public override void Merge(MagickImage image)
        {
            var settings = new MagickReadSettings
            {
                Width = Width,
                Height = Height,
                Format = MagickFormat.Bgra,
                Depth = 0x08
            };
            var data = new byte[Width * Height * 0x04];
            image.Read(data, settings);

            Compressed = (Flags & 0xFF) switch
            {
                0x02 => CompressRgb001(data),
                // 0x03 => Array.Empty<byte>(),
                _ => null
            } ?? throw new FormatException($"unsupported flags: {Flags:X8}");
        }

        // ?UnCompressRgb001_core@CRip007@@QBEXPAKHUSQRBDY@@@Z
        private byte[] UnCompressRgb001()
        {
            var output = new byte[Width * Height * 0x04];
            var stride = Width * 0x04;
            var bBits = CompressInfo[4];
            var gBits = CompressInfo[5];
            var rBits = CompressInfo[6];
            var isBgr676 = (0x06 == bBits) && (0x07 == gBits) && (0x06 == rBits);
            var bShift = 0x08 - bBits;
            var gShift = 0x10 - gBits;
            var rShift = 0x18 - rBits;
            const uint black = 0xFF000000u;
            var baseline = black | (0xFFu >> bBits << 0x00) | (0xFFu >> gBits << 0x08) | (0xFFu >> rBits << 0x10);
            var position = 0x00;

            for (var y = 0; y < Height; y++)
            {
                var offset = y * stride;
                var prev = black;
                for (var x = 0; x < Width;)
                {
                    var bgr = prev;
                    var vertical = ReadInt(ref position);
                    x += vertical;
                    do
                    {
                        if (ReadBit(ref position))
                        {
                            bgr = BitConverter.ToUInt32(output, offset - stride);
                            if (bgr != black) bgr -= baseline;
                            prev = bgr;
                        }
                        else
                        {
                            var b = 0u;
                            var g = 0u;
                            var r = 0u;

                            var gInc = 0;
                            if (ReadBit(ref position)) gInc = ReadSigned(ref position);

                            var bInc = 0;
                            if (ReadBit(ref position)) bInc = ReadQuantTransfer(ref position);

                            var rInc = 0;
                            if (ReadBit(ref position)) rInc = ReadQuantTransfer(ref position);

                            g = (uint)gInc;
                            if (isBgr676) gInc >>= 1;
                            var bDiff = gInc;
                            var rDiff = gInc;
                            if (CompressInfo[3] != 0)
                            {
                                bDiff = Diff(0x000000FF >> bShift, (int)(prev >> bShift), gInc);
                                rDiff = Diff(0x00FF0000 >> rShift, (int)(prev >> rShift), gInc);
                            }

                            b = (uint)(bDiff + bInc);
                            r = (uint)(rDiff + rInc);

                            prev += (b << bShift) + (g << gShift) + (r << rShift);
                            bgr = prev;
                        }

                        if (bgr != black) bgr += baseline;
                        BitConverter.GetBytes(bgr).CopyTo(output, offset);
                        offset += 0x04;
                    } while (--vertical > 0);

                    if (x >= Width) break;

                    var horizontal = ReadInt(ref position);
                    x += horizontal;
                    do
                    {
                        BitConverter.GetBytes(bgr).CopyTo(output, offset);
                        offset += 0x04;
                    } while (--horizontal > 0);
                }
            }

            return output;
        }

        // ?UnCompressRgba1@CRip007@@QBEXPAUIS5i@@PBUtagRBDY@@1W4tagRipRop@CRip@@@Z
        private byte[] UnCompressRgba1()
        {
            var output = new byte[Width * Height * 0x04];
            var stride = Width * 0x04;
            var bBits = CompressInfo[4];
            var gBits = CompressInfo[5];
            var rBits = CompressInfo[6];
            var bShift = 0x08 - bBits;
            var gShift = 0x10 - gBits;
            var rShift = 0x18 - rBits;
            var baseline = (0xFFu >> bBits << 0x00) | (0xFFu >> gBits << 0x08) | (0xFFu >> rBits << 0x10);
            var line = new uint[ValidateRect.W];
            var position = 0x00;

            for (var y = 0; y < ValidateRect.H; y++)
            {
                var offset = (ValidateRect.Y + y) * stride + ValidateRect.X * 4;
                var alpha = 0u;
                var bgr = 0u;
                var isRepeat = true;
                var count = 0;
                var chunk = 0;
                for (var x = 0; x < ValidateRect.W;)
                {
                    if (chunk == 0)
                    {
                        var alphaInc = 0;
                        if (ReadBit(ref position)) alphaInc = ReadSigned(ref position);
                        alpha += (uint)alphaInc;
                        if (0x00 == alpha || 0x1F <= alpha) chunk = ReadInt(ref position);
                    }

                    if (alpha == 0x00)
                    {
                        offset += 4 * chunk;
                        x += chunk;
                        chunk = 0;
                        continue;
                    }

                    if (alpha >= 0x1F) chunk--;
                    
                    if (0x00 == count)
                    {
                        count = ReadInt(ref position);
                        isRepeat = !isRepeat;
                    }

                    if (!isRepeat)
                    {
                        if (ReadBit(ref position))
                        {
                            bgr = line[x];
                        }
                        else
                        {
                            var gInc = 0;
                            if (ReadBit(ref position)) gInc = ReadSigned(ref position);

                            var bInc = 0;
                            if (ReadBit(ref position)) bInc = ReadQuantTransfer(ref position);

                            var rInc = 0;
                            if (ReadBit(ref position)) rInc = ReadQuantTransfer(ref position);

                            var g = (uint)gInc;
                            var d1 = Diff(0x000000FF >> bShift, (int)(bgr >> bShift), gInc);
                            var b = (uint)(d1 + bInc);
                            var d2 = Diff(0x00FF0000 >> rShift, (int)(bgr >> rShift), gInc);
                            var r = (uint)(d2 + rInc);

                            bgr += (b << bShift) + (g << gShift) + (r << rShift);
                        }
                    }

                    count--;
                    var pixel = (baseline + bgr) | (0x1F >= alpha ? 0x80000000u : alpha << 0x1A);
                    BitConverter.GetBytes(pixel).CopyTo(output, offset);
                    offset += 0x04;
                    line[x++] = bgr;
                }
            }

            return output;
        }

        // ?CompressDibRgba@CRip007@@QAEHVTS5i@@ABUtagSQR@@HAAUCRip007CompressInfo@@@Z
        private byte[] CompressRgb001(byte[] input)
        {
            var compressed = new List<byte>(input.Length);
            var stride = Width * 0x04;
            var bBits = CompressInfo[4];
            var gBits = CompressInfo[5];
            var rBits = CompressInfo[6];
            var isBgr676 = (6 == bBits) && (7 == gBits) && (6 == rBits);
            var bShift = 0x08 - bBits;
            var gShift = 0x10 - gBits;
            var rShift = 0x18 - rBits;
            const uint black = 0xFF000000u;
            var baseline = black | (0xFFu >> bBits << 0x00) | (0xFFu >> gBits << 0x08) | (0xFFu >> rBits << 0x10);
            var position = 0x00;

            for (var y = 0; y < Height; y++)
            {
                var offset = y * stride;
                var vertical = 0;
                var horizontal = 0;
                var prev = black;
                for (var x = 0; x < Width; x++, offset += 4)
                {
                    var bgr = BitConverter.ToUInt32(input, offset);
                    if (vertical != 0 && BitConverter.ToUInt32(input, offset - 0x04) == bgr)
                    {
                        horizontal++;
                    }
                    else
                    {
                        vertical++;
                    }

                    if (x + 1 != Width && horizontal == 0) continue;
                    if (x + 1 != Width && BitConverter.ToUInt32(input, offset + 0x04) == bgr) continue;
                    WriteInt(compressed, ref position, vertical);
                    var dst = offset - (vertical + horizontal - 1) * 0x04;
                    for (var i = 0; i < vertical; i++, dst += 0x04)
                    {
                        var bgra = BitConverter.ToUInt32(input, dst);
                        if (dst >= stride && bgra == BitConverter.ToUInt32(input, dst - stride))
                        {
                            WriteBit(compressed, ref position, true);
                            if (bgra != black) bgra -= baseline;
                            prev = bgra;
                        }
                        else
                        {
                            WriteBit(compressed, ref position, false);
                            if (bgra != black) bgra -= baseline;
                            var diff = bgra - prev;
                            if (!WriteBgr(prev, diff)) throw new FormatException("...");
                            prev = bgra;
                        }
                    }

                    vertical = 0;

                    if (x + 1 == Width && horizontal == 0) continue;
                    WriteInt(compressed, ref position, horizontal);
                    horizontal = 0;
                }
            }

            return compressed.ToArray();

            bool WriteBgr(uint prev, uint diff)
            {
                var exit = new bool[0x0100];
                exit[0x00] = true;
                for (var i = 0x0000; i < 0x0100; i++) exit[TblQuantTransfer[CompressInfo[0], i]] = true;
                for (var gX = 0x0001; gX < 0x1000; gX++)
                {
                    var gInc = (0x00 - (gX & 0x01)) * (gX >> 1);
                    var g = (uint)gInc;
                    if (isBgr676) gInc >>= 1;
                    var bDiff = gInc;
                    var rDiff = gInc;
                    if (CompressInfo[3] != 0)
                    {
                        bDiff = Diff(0x000000FF >> bShift, (int)(prev >> bShift), gInc);
                        rDiff = Diff(0x00FF0000 >> rShift, (int)(prev >> rShift), gInc);
                    }

                    var t = diff - (g << gShift);
                    if ((t & 0x0000FFFF) >> 0x08 != 0x00 && (t & 0x0000FFFF) >> 0x08 != 0xFF) continue;
                    var b = (uint)((short)(t & 0x0000FFFFu) >> bShift);
                    var r = (uint)((int)(t - (uint)(short)(t & 0x0000FFFFu)) >> rShift);
                    var v = (b << bShift) + (g << gShift) + (r << rShift);
                    if (v != diff) continue;
                    var bInc = (int)(b - (uint)bDiff);
                    var rInc = (int)(r - (uint)rDiff);
                    if (!exit[Math.Abs(bInc)]) continue;
                    if (!exit[Math.Abs(rInc)]) continue;
                    WriteBit(compressed, ref position, g != 0);
                    if (g != 0) WriteSigned(compressed, ref position, (int)g);
                    WriteBit(compressed, ref position, bInc != 0);
                    if (bInc != 0) WriteQuantTransfer(compressed, ref position, bInc);
                    WriteBit(compressed, ref position, rInc != 0);
                    if (rInc != 0) WriteQuantTransfer(compressed, ref position, rInc);
                    return true;
                }

                return false;
            }
        }

        private int ReadInt(ref int position)
        {
            var x = 0x01;
            while (ReadBit(ref position)) x = (x << 0x01) | (ReadBit(ref position) ? 0x01 : 0x00);
            return x;
        }

        private int ReadSigned(ref int position)
        {
            return ReadBit(ref position) ? -ReadInt(ref position) : ReadInt(ref position);
        }

        private int ReadQuantTransfer(ref int position)
        {
            return ReadBit(ref position)
                ? -TblQuantTransfer[CompressInfo[0], ReadInt(ref position)]
                : TblQuantTransfer[CompressInfo[0], ReadInt(ref position)];
        }

        private void WriteInt(List<byte> buffer, ref int position, int value)
        {
            if (value <= 0) throw new FormatException($"{value} <= 0");
            var shift = 0x18;
            while (value >> shift == 0) shift--;
            shift--;
            while (shift >= 0)
            {
                WriteBit(buffer, ref position, true);
                WriteBit(buffer, ref position, ((value >> shift) & 0x01) != 0x00);
                shift--;
            }

            WriteBit(buffer, ref position, false);
        }

        private void WriteSigned(List<byte> buffer, ref int position, int value)
        {
            WriteBit(buffer, ref position, value < 0);
            WriteInt(buffer, ref position, Math.Abs(value));
        }

        private void WriteQuantTransfer(List<byte> buffer, ref int position, int value)
        {
            WriteBit(buffer, ref position, value < 0);
            value = Math.Abs(value);
            var index = 0;
            while (TblQuantTransfer[CompressInfo[0], index] != value) index++;
            WriteInt(buffer, ref position, index);
        }

        private static int Diff(int u, int v, int t)
        {
            var diff = u & v;
            diff = -diff;
            if (t < diff) return diff;
            diff += u;
            if (t <= diff) diff = t;
            return diff;
        }

        // ?_GLOBAL_tblQuantTransfer@@3QBUCQuantTbl@@B
        private static readonly byte[,] TblQuantTransfer =
        {
            {
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
                0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
                0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
                0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
                0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
                0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
                0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
                0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
                0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
                0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
                0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
                0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
                0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
            },
            {
                0x00, 0x01, 0x02, 0x04, 0x06, 0x09, 0x0C, 0x0F, 0x13, 0x16, 0x19, 0x1C, 0x1F, 0x23, 0x27, 0x2B,
                0x30, 0x34, 0x38, 0x3C, 0x40, 0x44, 0x48, 0x4C, 0x50, 0x54, 0x58, 0x5C, 0x60, 0x64, 0x68, 0x6C,
                0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x01, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, 0x04, 0x05, 0x05, 0x05, 0x06, 0x06, 0x06, 0x07,
                0x07, 0x07, 0x07, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B, 0x0B, 0x0C,
                0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
                0x10, 0x10, 0x10, 0x10, 0x11, 0x11, 0x11, 0x11, 0x12, 0x12, 0x12, 0x12, 0x13, 0x13, 0x13, 0x13,
                0x14, 0x14, 0x14, 0x14, 0x15, 0x15, 0x15, 0x15, 0x16, 0x16, 0x16, 0x16, 0x17, 0x17, 0x17, 0x17,
                0x18, 0x18, 0x18, 0x18, 0x19, 0x19, 0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B,
                0x1C, 0x1C, 0x1C, 0x1C, 0x1D, 0x1D, 0x1D, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1F, 0x1F, 0x1F,
                0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
            },
            {
                0x00, 0x01, 0x02, 0x04, 0x08, 0x0C, 0x10, 0x14, 0x18, 0x1B, 0x1E, 0x22, 0x26, 0x2A, 0x2E, 0x32,
                0x36, 0x3A, 0x3E, 0x42, 0x46, 0x4B, 0x50, 0x55, 0x5A, 0x5F, 0x64, 0x69, 0x6E, 0x73, 0x78, 0x7D,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x01, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x04, 0x05, 0x05, 0x05, 0x05,
                0x06, 0x06, 0x06, 0x06, 0x07, 0x07, 0x07, 0x07, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x0A, 0x0A,
                0x0A, 0x0A, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E,
                0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10, 0x11, 0x11, 0x11, 0x11, 0x12, 0x12,
                0x12, 0x12, 0x13, 0x13, 0x13, 0x13, 0x14, 0x14, 0x14, 0x14, 0x14, 0x15, 0x15, 0x15, 0x15, 0x15,
                0x16, 0x16, 0x16, 0x16, 0x16, 0x17, 0x17, 0x17, 0x17, 0x17, 0x18, 0x18, 0x18, 0x18, 0x18, 0x19,
                0x19, 0x19, 0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1C,
                0x1C, 0x1C, 0x1C, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1F, 0x1F,
            },
            {
                0x00, 0x01, 0x03, 0x07, 0x0C, 0x10, 0x15, 0x1A, 0x20, 0x25, 0x2A, 0x30, 0x36, 0x3C, 0x42, 0x48,
                0x50, 0x54, 0x58, 0x5C, 0x60, 0x64, 0x68, 0x6C, 0x70, 0x74, 0x78, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x04,
                0x05, 0x05, 0x05, 0x05, 0x05, 0x06, 0x06, 0x06, 0x06, 0x06, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
                0x08, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A,
                0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D,
                0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
                0x10, 0x10, 0x10, 0x10, 0x11, 0x11, 0x11, 0x11, 0x12, 0x12, 0x12, 0x12, 0x13, 0x13, 0x13, 0x13,
                0x14, 0x14, 0x14, 0x14, 0x15, 0x15, 0x15, 0x15, 0x16, 0x16, 0x16, 0x16, 0x17, 0x17, 0x17, 0x17,
                0x18, 0x18, 0x18, 0x18, 0x19, 0x19, 0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
            },
            {
                0x00, 0x01, 0x03, 0x07, 0x0D, 0x13, 0x1A, 0x21, 0x28, 0x2F, 0x36, 0x3E, 0x46, 0x4E, 0x56, 0x5E,
                0x68, 0x6A, 0x6C, 0x6E, 0x70, 0x72, 0x74, 0x76, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04,
                0x04, 0x04, 0x04, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
                0x06, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x09,
                0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B,
                0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D,
                0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F,
                0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12, 0x13, 0x13,
                0x14, 0x14, 0x15, 0x15, 0x16, 0x16, 0x17, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
            },
            {
                0x00, 0x01, 0x04, 0x0A, 0x11, 0x18, 0x20, 0x28, 0x32, 0x3C, 0x46, 0x50, 0x5A, 0x64, 0x6E, 0x78,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
                0x03, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
                0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
                0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09,
                0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A,
                0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
                0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E,
                0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
            }
        };
    }
}